(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{451:function(t,a,s){"use strict";s.r(a);var n=s(17),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"由来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#由来"}},[t._v("#")]),t._v(" 由来")]),t._v(" "),s("p",[t._v("在学习 GraphQL 时候，下载了第一个Demo，里面有这么一个文件,是开发 GraphQL 的代码开发规范，让人记忆深刻。这些优秀的习惯一个个汇聚，坚持下去，才能成就一个长时间可维护、结构清晰的软件！")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/02.GraphQL/1641570775.jpg",alt:"123"}})]),t._v(" "),s("h3",{attrs:{id:"通用准则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用准则"}},[t._v("#")]),t._v(" 通用准则")]),t._v(" "),s("ol",[s("li",[t._v("我们更喜欢0依赖。不要把 Guava,apache-commons,spring-xxx,甚至n多个版本的StringUtils方法的Jar引入。更少的依赖意味着 graphql对大多数人更有作用。")]),t._v(" "),s("li",[t._v("我们不想使用Http协议。我们是运行graphql查询的底层引擎，其他层可以更好地处理其他问题，例如 JSON 和 HTTP。")]),t._v(" "),s("li",[t._v("我们更喜欢简单的代码而不是聪明的代码。使用命名良好的方法应该是可读的。 巧妙的嵌套流和 lambdas (函数式编程) 不是我们的东西。")]),t._v(" "),s("li",[t._v("我们更喜欢一般而不是具体。 所以代码应该普遍适用于用例，而不是高度特定于某些用例，即使它需要更多的设置。也就是必须要有抽象性，是解决某一类的问题的代码，而不是某一个问题的代码。")])]),t._v(" "),s("h3",{attrs:{id:"更多特殊的话题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多特殊的话题"}},[t._v("#")]),t._v(" 更多特殊的话题")]),t._v(" "),s("ol",[s("li",[t._v("使用@Public 和@Internal 来传达支持的稳定性级别。")]),t._v(" "),s("li",[t._v("永远不要将类或方法设为包级别私有或protected：将其设为 public 或 private，并使用 @Internal 传达该类可以在不通知的情况下更改。 用户可以自行决定使用内部事物时的风险")])]),t._v(" "),s("h3",{attrs:{id:"可选值和空值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选值和空值"}},[t._v("#")]),t._v(" 可选值和空值")]),t._v(" "),s("ol",[s("li",[t._v("我们混合了 Optional 和允许空值，因为 GraphQL Java 最初是用 Java 6 编写的。")]),t._v(" "),s("li",[t._v("我们的目标是不使用 Optional，以保持整体一致。")])]),t._v(" "),s("h3",{attrs:{id:"单元测试和依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试和依赖"}},[t._v("#")]),t._v(" 单元测试和依赖")]),t._v(" "),s("ol",[s("li",[t._v("所有的测试都是用Spock编写。Spock地址：http://spockframework.org/")]),t._v(" "),s("li",[t._v("所有的新代码都必须有单元测试。")]),t._v(" "),s("li",[t._v("一般情况是每个类的每个方法默认都是非静态的，每个依赖项都是一个具有包私有可见性的实例字段，以便在单元测试中轻松模拟，属性字段应使用@VisibleForTesting 进行注解。")])]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@VisibleForTesting")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),t._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n")])])]),s("h3",{attrs:{id:"静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),s("ol",[s("li",[t._v("静态方法只允许用于功能非常有限且没有任何依赖关系的方法。 静态方法意味着您永远不想mock它们。\n典型的例子是像 GraphQLTypeUtil.isNonNull() 这样的 util 方法")])]),t._v(" "),s("h3",{attrs:{id:"是否用工具类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否用工具类"}},[t._v("#")]),t._v(" 是否用工具类")]),t._v(" "),s("ol",[s("li",[t._v("不要混合静态和非静态方法（工厂方法除外）：每个类要么是只有静态方法的通用“Util”类，要么是没有静态方法的类。")])]),t._v(" "),s("h3",{attrs:{id:"命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[t._v("#")]),t._v(" 命名")]),t._v(" "),s("ol",[s("li",[t._v("命名是可读源代码的关键要素。 每个变量和方法都应该有一个明确的名称。 除了索引迭代外，单个字符变量名永远都行不通。")])]),t._v(" "),s("h3",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[t._v("#")]),t._v(" 注释")]),t._v(" "),s("ol",[s("li",[t._v("公共 API 应通过 JavaDoc 进行记录。 JavaDoc 应该描述应该如何以及为什么应该使用这个类/方法。 它不应指定实现的细节。")]),t._v(" "),s("li",[t._v("内部 API 没有 JavaDoc，通常我们会尽可能避免任何形式的注释。")])]),t._v(" "),s("h3",{attrs:{id:"方法大于注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法大于注释"}},[t._v("#")]),t._v(" 方法大于注释")]),t._v(" "),s("ol",[s("li",[t._v("方法中的大多数注释都可以通过创建方法并为方法名称提供注释文本来重构。")])]),t._v(" "),s("h3",{attrs:{id:"不变性和构建器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不变性和构建器"}},[t._v("#")]),t._v(" 不变性和构建器")]),t._v(" "),s("ol",[s("li",[t._v("每个公共数据类都应该是：")])]),t._v(" "),s("ul",[s("li",[t._v("不可变")]),t._v(" "),s("li",[t._v("有一个 Builder 类")]),t._v(" "),s("li",[t._v("有一个转换方法")])]),t._v(" "),s("p",[t._v("每个承载数据的类应该是不变的，并且应该包含用工厂方法生成的(例如 newFoo())一个 公共的、静态的内部类 Builder。\n")]),t._v(" "),s("h3",{attrs:{id:"默认的集合类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认的集合类型"}},[t._v("#")]),t._v(" 默认的集合类型")]),t._v(" "),s("ol",[s("li",[t._v("使用 Set、List、Map的默认方式是：")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fooList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fooSet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashSet")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fooMap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("通过使用通用接口而不是使用实现，我们确保我们不依赖任何特定于 impl 的东西。\nSet 和 Map 的默认实现应该是 LinkedHashSet 和 LinkedHashMap，因为它提供了稳定的迭代顺序。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("LinkedHashSet 和 HashSet 有什么区别？")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("LinkedHashMap 和 HashMap 有什么区别？")])]),t._v(" "),s("h3",{attrs:{id:"stream-循环、for-循环和-角标循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stream-循环、for-循环和-角标循环"}},[t._v("#")]),t._v(" Stream 循环、for 循环和 角标循环")]),t._v(" "),s("ol",[s("li",[t._v("通常，用 Stream 是没问题的，但是必须保持简单。应避免映射内部的流映射，并将内部逻辑重构为方法。（非常赞同）")]),t._v(" "),s("li",[t._v("也可以使用传统的 for 循环或其他结构：有时候它比Stream API更具有可读性。Stream API 不是其他循环或迭代的替代品。")])]),t._v(" "),s("h3",{attrs:{id:"最大缩进为两位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大缩进为两位"}},[t._v("#")]),t._v(" 最大缩进为两位")]),t._v(" "),s("ol",[s("li",[t._v("最重要的规则之一是尽可能减少缩进的数量。 一般来说，最大数量应该是两个。 这意味着条件内的 for 循环是可以的。 for 循环内的 for 循环内的条件不是。")]),t._v(" "),s("li",[t._v("提取成方法是最简单的处理方式。")])]),t._v(" "),s("h3",{attrs:{id:"方法应及时返回"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法应及时返回"}},[t._v("#")]),t._v(" 方法应及时返回")]),t._v(" "),s("ol",[s("li",[t._v("及早方法返回可以避免缩进")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" something\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上述代码比下面的要好：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("cond"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" something\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"最大行长和多行语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大行长和多行语句"}},[t._v("#")]),t._v(" 最大行长和多行语句")]),t._v(" "),s("ol",[s("li",[t._v("我们没有严格的最大行长。 但当然，每个语句都应该受到限制。 与其说是长度，不如说是语句的作用。")]),t._v(" "),s("li",[t._v("如果一个语句有多行，它应该被分解成相同的缩进级别。")])]),t._v(" "),s("p",[t._v("下面这个例子是可以的：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" myMap\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapEntry")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("再下面这个例子是有问题的：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fooListOfList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                 fooList "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" fooList"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sorted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMyProp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("它在流中嵌套了一个流，并且内部流又有一个 lambda表达式。 内部流应该被提取到一个额外的方法中，并且每个方法调用都应该在一个新行上：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fooListOfList\n                 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mapFooList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"每个类都有自己的文件-避免内部类和内部接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每个类都有自己的文件-避免内部类和内部接口"}},[t._v("#")]),t._v(" 每个类都有自己的文件：避免内部类和内部接口")]),t._v(" "),s("ol",[s("li",[t._v("一般来说，每个类/接口都应该有自己的文件。内部类几乎在任何情况都不该使用（尤其是 public 的类）。 每个类都应该有自己的文件，以便更容易阅读和探索代码。")])]),t._v(" "),s("h3",{attrs:{id:"使用-graphql-assert-而不是-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-graphql-assert-而不是-objects"}},[t._v("#")]),t._v(" 使用 graphql.Assert 而不是 Objects")]),t._v(" "),s("p",[t._v("我们维护自己的一小组 Assert 实用程序方法。 为了保持一致而不要使用 Objects.requireNonNull 等方法。")]),t._v(" "),s("h3",{attrs:{id:"对公共-api-中的方法参数处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对公共-api-中的方法参数处理"}},[t._v("#")]),t._v(" 对公共 API 中的方法参数处理")]),t._v(" "),s("p",[t._v("不要对接口方法使用特定的参数，而是使用 FooEnvironment 参数。 这确保了在添加新输入时未来的向后兼容性。")])])}),[],!1,null,null,null);a.default=r.exports}}]);